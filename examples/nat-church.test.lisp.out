(claim true (nu (A B) (-> A B A)))
(claim false (nu (A B) (-> A B B)))
(claim if (nu (A B C) (-> (-> A B C) A B C)))
(claim and (nu (A B C D) (-> (-> A (-> B C C) D) A D)))
(claim or (nu (A B C D) (-> (-> (-> A B A) C D) C D)))
(claim not (nu (A B C D E) (-> (-> (-> A B B) (-> C D C) E) E)))
(claim cons (nu (A B C) (-> A B (-> A B C) C)))
(claim car (nu (A B C) (-> (-> (-> A B A) C) C)))
(claim cdr (nu (A B C) (-> (-> (-> A B B) C) C)))
(claim null (nu (A B C) (-> A B C B)))
(claim null? (nu (A B C D E) (-> (-> (-> A B C D D) E) E)))
(claim zero (nu (A B) (-> A B A)))
(claim add1 (nu (A B C) (-> (-> A (-> B C) B) A (-> B C) C)))
(claim iter-Nat (nu (A B C) (-> (-> A B C) A B C)))
(claim one (nu (A B) (-> A (-> A B) B)))
(claim two (nu (A) (-> A (-> A A) A)))
(claim three (nu (A) (-> A (-> A A) A)))
(claim four (nu (A) (-> A (-> A A) A)))
(claim five (nu (A) (-> A (-> A A) A)))
(claim six (nu (A) (-> A (-> A A) A)))
(claim seven (nu (A) (-> A (-> A A) A)))
(claim eight (nu (A) (-> A (-> A A) A)))
(claim nine (nu (A) (-> A (-> A A) A)))
(claim ten (nu (A) (-> A (-> A A) A)))
(claim add (nu (A B C D E) (-> (-> A (-> (-> B (-> C D) C) B (-> C D) D) E) A E)))
(claim add-rosser (nu (A B C D) (-> (-> A B C) (-> D B A) D B C)))
(claim mul (nu (A B C D E F G H) (-> (-> (-> A B A) (-> C D) E) (-> C (-> (-> F (-> G H) G) F (-> G H) H) D) E)))
(claim power-of (nu (A B C D E F G H I J K) (-> (-> (-> A (-> A B) B) (-> (-> C (-> (-> D (-> E F) E) D (-> E F) F) G) H) I) (-> (-> J K J) (-> C G) H) I)))
(claim power (nu (A B C D E F G H I J K) (-> (-> (-> A B A) (-> C D) E) (-> (-> F (-> F G) G) (-> (-> C (-> (-> H (-> I J) I) H (-> I J) J) D) E) K) K)))
(claim zero? (nu (A B C D E F) (-> (-> (-> A B A) (-> C D E E) F) F)))
(claim shift-add1 (nu (A B C D E F) (-> (-> (-> A B B) C (-> D E) D) (-> (-> C (-> D E) D) (-> C (-> D E) E) F) F)))
(claim sub1 (nu (A B C D E F G H I J K L M N) (-> (-> (-> (-> (-> A B A) (-> C D C) E) E) (-> (-> (-> F G G) H (-> I J) I) (-> (-> H (-> I J) I) (-> H (-> I J) J) K) K) (-> L M L) N) N)))
(claim sub (nu (A B C D E F G H I J K L M N O P) (-> A (-> A (-> (-> (-> (-> (-> B C B) (-> D E D) F) F) (-> (-> (-> G H H) I (-> J K) J) (-> (-> I (-> J K) J) (-> I (-> J K) K) L) L) (-> M N M) O) O) P) P)))
(claim lteq (nu (A B C D E F G H I J K L M N O P Q R S T U) (-> A (-> A (-> (-> (-> (-> (-> B C B) (-> D E D) F) F) (-> (-> (-> G H H) I (-> J K) J) (-> (-> I (-> J K) J) (-> I (-> J K) K) L) L) (-> M N M) O) O) (-> P Q P) (-> R S T T) U) U)))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step base)))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step base)))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step base))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step base))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step base)))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step base)))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step base))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step base))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step (step (step (step base))))))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step (step (step (step base))))))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step (step (step base)))))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step (step (step base)))))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step base))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step base))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step (step (step (step (step (step (step (step (step (step base))))))))))))))))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step (step (step (step (step (step (step (step (step (step (step (step (step (step base))))))))))))))))))
(the (nu (A B) (-> A B A)) (lambda (t f) t))
(the (nu (A B) (-> A B A)) (lambda (t f) t))
(the (nu (A B) (-> A B B)) (lambda (t f) f))
(the (nu (A B) (-> A B B)) (lambda (t f) f))
(the (nu (A) (-> A A A)) (lambda (t f) f))
(the (nu (A B) (-> A B B)) (lambda (t f) f))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step base)))
(the (nu (A B) (-> A (-> A B) B)) (lambda (base step) (step base)))
(the (nu (A B) (-> A (-> A B) A)) (lambda (base step) base))
(the (nu (A B) (-> A B A)) (lambda (base step) base))
(the (nu (A B) (-> A B A)) (lambda (base step) base))
(the (nu (A B) (-> A B A)) (lambda (base step) base))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step base)))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step (step base)))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step base))))
(the (nu (A) (-> A (-> A A) A)) (lambda (base step) (step (step base))))
